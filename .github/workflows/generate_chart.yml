name: Generate Chart

on:
  schedule:
    - cron: '0 16 * * *'  # Runs daily at 16:00 UTC (00:00 Perth Time)
  push:
    branches:
      - main

jobs:
  generate:
    runs-on: ubuntu-latest
    env:
      TZ: 'Australia/Perth'  # Sets the timezone for the workflow
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false  # Ensures GH_TOKEN is used for pushing

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Step 3: Install necessary Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub matplotlib pytz requests

      # Step 4: Generate Chart and Update README
      - name: Generate Chart and Update README
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          python chart/scripts/generate_chart.py

      # Step 5: Commit and Push Changes
      - name: Commit and push changes
        run: |
          # Configure Git with a user name and email
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

          # Stage the specific files to ensure only these are committed
          git add chart.png README.md

          # Check if there are any changes to commit
          if ! git diff --cached --quiet; then
            # Commit the changes with a timestamp
            git commit -m "ðŸ“ˆ Update chart and README - $(date +'%Y-%m-%d %H:%M:%S')"

            # Push the changes to the main branch using GH_TOKEN
            git push origin main
          else
            echo "No changes detected. Skipping commit."
          fi
